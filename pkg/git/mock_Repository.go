// Code generated by mockery v2.46.3. DO NOT EDIT.

package git

import (
	context "context"

	config "github.com/go-git/go-git/v5/config"

	mock "github.com/stretchr/testify/mock"

	plumbing "github.com/go-git/go-git/v5/plumbing"

	v5 "github.com/go-git/go-git/v5"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: paths
func (_m *MockRepository) Add(paths ...string) error {
	_va := make([]interface{}, len(paths))
	for _i := range paths {
		_va[_i] = paths[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(...string) error); ok {
		r0 = rf(paths...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - paths ...string
func (_e *MockRepository_Expecter) Add(paths ...interface{}) *MockRepository_Add_Call {
	return &MockRepository_Add_Call{Call: _e.mock.On("Add",
		append([]interface{}{}, paths...)...)}
}

func (_c *MockRepository_Add_Call) Run(run func(paths ...string)) *MockRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_Add_Call) Return(_a0 error) *MockRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Add_Call) RunAndReturn(run func(...string) error) *MockRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: message
func (_m *MockRepository) Commit(message string) (plumbing.Hash, error) {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 plumbing.Hash
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (plumbing.Hash, error)); ok {
		return rf(message)
	}
	if rf, ok := ret.Get(0).(func(string) plumbing.Hash); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(plumbing.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type MockRepository_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - message string
func (_e *MockRepository_Expecter) Commit(message interface{}) *MockRepository_Commit_Call {
	return &MockRepository_Commit_Call{Call: _e.mock.On("Commit", message)}
}

func (_c *MockRepository_Commit_Call) Run(run func(message string)) *MockRepository_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRepository_Commit_Call) Return(_a0 plumbing.Hash, _a1 error) *MockRepository_Commit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Commit_Call) RunAndReturn(run func(string) (plumbing.Hash, error)) *MockRepository_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRemote provides a mock function with given fields: name, url
func (_m *MockRepository) CreateRemote(name string, url string) (*v5.Remote, error) {
	ret := _m.Called(name, url)

	if len(ret) == 0 {
		panic("no return value specified for CreateRemote")
	}

	var r0 *v5.Remote
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*v5.Remote, error)); ok {
		return rf(name, url)
	}
	if rf, ok := ret.Get(0).(func(string, string) *v5.Remote); ok {
		r0 = rf(name, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Remote)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_CreateRemote_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRemote'
type MockRepository_CreateRemote_Call struct {
	*mock.Call
}

// CreateRemote is a helper method to define mock.On call
//   - name string
//   - url string
func (_e *MockRepository_Expecter) CreateRemote(name interface{}, url interface{}) *MockRepository_CreateRemote_Call {
	return &MockRepository_CreateRemote_Call{Call: _e.mock.On("CreateRemote", name, url)}
}

func (_c *MockRepository_CreateRemote_Call) Run(run func(name string, url string)) *MockRepository_CreateRemote_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_CreateRemote_Call) Return(_a0 *v5.Remote, _a1 error) *MockRepository_CreateRemote_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_CreateRemote_Call) RunAndReturn(run func(string, string) (*v5.Remote, error)) *MockRepository_CreateRemote_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: path, branch
func (_m *MockRepository) Init(path string, branch string) (*v5.Repository, error) {
	ret := _m.Called(path, branch)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 *v5.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*v5.Repository, error)); ok {
		return rf(path, branch)
	}
	if rf, ok := ret.Get(0).(func(string, string) *v5.Repository); ok {
		r0 = rf(path, branch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(path, branch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockRepository_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - path string
//   - branch string
func (_e *MockRepository_Expecter) Init(path interface{}, branch interface{}) *MockRepository_Init_Call {
	return &MockRepository_Init_Call{Call: _e.mock.On("Init", path, branch)}
}

func (_c *MockRepository_Init_Call) Run(run func(path string, branch string)) *MockRepository_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockRepository_Init_Call) Return(_a0 *v5.Repository, _a1 error) *MockRepository_Init_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Init_Call) RunAndReturn(run func(string, string) (*v5.Repository, error)) *MockRepository_Init_Call {
	_c.Call.Return(run)
	return _c
}

// InitAndCommit provides a mock function with given fields: dir, url, cfg
func (_m *MockRepository) InitAndCommit(dir string, url string, cfg *config.Config) error {
	ret := _m.Called(dir, url, cfg)

	if len(ret) == 0 {
		panic("no return value specified for InitAndCommit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *config.Config) error); ok {
		r0 = rf(dir, url, cfg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_InitAndCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitAndCommit'
type MockRepository_InitAndCommit_Call struct {
	*mock.Call
}

// InitAndCommit is a helper method to define mock.On call
//   - dir string
//   - url string
//   - cfg *config.Config
func (_e *MockRepository_Expecter) InitAndCommit(dir interface{}, url interface{}, cfg interface{}) *MockRepository_InitAndCommit_Call {
	return &MockRepository_InitAndCommit_Call{Call: _e.mock.On("InitAndCommit", dir, url, cfg)}
}

func (_c *MockRepository_InitAndCommit_Call) Run(run func(dir string, url string, cfg *config.Config)) *MockRepository_InitAndCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*config.Config))
	})
	return _c
}

func (_c *MockRepository_InitAndCommit_Call) Return(_a0 error) *MockRepository_InitAndCommit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_InitAndCommit_Call) RunAndReturn(run func(string, string, *config.Config) error) *MockRepository_InitAndCommit_Call {
	_c.Call.Return(run)
	return _c
}

// PlainCloneContext provides a mock function with given fields: ctx, path, o
func (_m *MockRepository) PlainCloneContext(ctx context.Context, path string, o *v5.CloneOptions) (*v5.Repository, error) {
	ret := _m.Called(ctx, path, o)

	if len(ret) == 0 {
		panic("no return value specified for PlainCloneContext")
	}

	var r0 *v5.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *v5.CloneOptions) (*v5.Repository, error)); ok {
		return rf(ctx, path, o)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *v5.CloneOptions) *v5.Repository); ok {
		r0 = rf(ctx, path, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *v5.CloneOptions) error); ok {
		r1 = rf(ctx, path, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_PlainCloneContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlainCloneContext'
type MockRepository_PlainCloneContext_Call struct {
	*mock.Call
}

// PlainCloneContext is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - o *v5.CloneOptions
func (_e *MockRepository_Expecter) PlainCloneContext(ctx interface{}, path interface{}, o interface{}) *MockRepository_PlainCloneContext_Call {
	return &MockRepository_PlainCloneContext_Call{Call: _e.mock.On("PlainCloneContext", ctx, path, o)}
}

func (_c *MockRepository_PlainCloneContext_Call) Run(run func(ctx context.Context, path string, o *v5.CloneOptions)) *MockRepository_PlainCloneContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*v5.CloneOptions))
	})
	return _c
}

func (_c *MockRepository_PlainCloneContext_Call) Return(_a0 *v5.Repository, _a1 error) *MockRepository_PlainCloneContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_PlainCloneContext_Call) RunAndReturn(run func(context.Context, string, *v5.CloneOptions) (*v5.Repository, error)) *MockRepository_PlainCloneContext_Call {
	_c.Call.Return(run)
	return _c
}

// Push provides a mock function with given fields: o
func (_m *MockRepository) Push(o *v5.PushOptions) error {
	ret := _m.Called(o)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v5.PushOptions) error); ok {
		r0 = rf(o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Push_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Push'
type MockRepository_Push_Call struct {
	*mock.Call
}

// Push is a helper method to define mock.On call
//   - o *v5.PushOptions
func (_e *MockRepository_Expecter) Push(o interface{}) *MockRepository_Push_Call {
	return &MockRepository_Push_Call{Call: _e.mock.On("Push", o)}
}

func (_c *MockRepository_Push_Call) Run(run func(o *v5.PushOptions)) *MockRepository_Push_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v5.PushOptions))
	})
	return _c
}

func (_c *MockRepository_Push_Call) Return(_a0 error) *MockRepository_Push_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Push_Call) RunAndReturn(run func(*v5.PushOptions) error) *MockRepository_Push_Call {
	_c.Call.Return(run)
	return _c
}

// Repo provides a mock function with given fields:
func (_m *MockRepository) Repo() *v5.Repository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Repo")
	}

	var r0 *v5.Repository
	if rf, ok := ret.Get(0).(func() *v5.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v5.Repository)
		}
	}

	return r0
}

// MockRepository_Repo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Repo'
type MockRepository_Repo_Call struct {
	*mock.Call
}

// Repo is a helper method to define mock.On call
func (_e *MockRepository_Expecter) Repo() *MockRepository_Repo_Call {
	return &MockRepository_Repo_Call{Call: _e.mock.On("Repo")}
}

func (_c *MockRepository_Repo_Call) Run(run func()) *MockRepository_Repo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_Repo_Call) Return(_a0 *v5.Repository) *MockRepository_Repo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Repo_Call) RunAndReturn(run func() *v5.Repository) *MockRepository_Repo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
