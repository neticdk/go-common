// Code generated by mockery v2.46.3. DO NOT EDIT.

package puller

import (
	context "context"

	artifact "github.com/neticdk/go-common/pkg/artifact"

	mock "github.com/stretchr/testify/mock"
)

// MockPuller is an autogenerated mock type for the Puller type
type MockPuller struct {
	mock.Mock
}

type MockPuller_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPuller) EXPECT() *MockPuller_Expecter {
	return &MockPuller_Expecter{mock: &_m.Mock}
}

// Pull provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *MockPuller) Pull(_a0 context.Context, _a1 PullMethod, _a2 *artifact.Artifact, _a3 ...PullOption) (*artifact.PullResult, error) {
	var tmpRet mock.Arguments
	if len(_a3) > 0 {
		tmpRet = _m.Called(_a0, _a1, _a2, _a3)
	} else {
		tmpRet = _m.Called(_a0, _a1, _a2)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Pull")
	}

	var r0 *artifact.PullResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, PullMethod, *artifact.Artifact, ...PullOption) (*artifact.PullResult, error)); ok {
		return rf(_a0, _a1, _a2, _a3...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, PullMethod, *artifact.Artifact, ...PullOption) *artifact.PullResult); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*artifact.PullResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, PullMethod, *artifact.Artifact, ...PullOption) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPuller_Pull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pull'
type MockPuller_Pull_Call struct {
	*mock.Call
}

// Pull is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 PullMethod
//   - _a2 *artifact.Artifact
//   - _a3 ...PullOption
func (_e *MockPuller_Expecter) Pull(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *MockPuller_Pull_Call {
	return &MockPuller_Pull_Call{Call: _e.mock.On("Pull",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *MockPuller_Pull_Call) Run(run func(_a0 context.Context, _a1 PullMethod, _a2 *artifact.Artifact, _a3 ...PullOption)) *MockPuller_Pull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]PullOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(PullOption)
			}
		}
		run(args[0].(context.Context), args[1].(PullMethod), args[2].(*artifact.Artifact), variadicArgs...)
	})
	return _c
}

func (_c *MockPuller_Pull_Call) Return(_a0 *artifact.PullResult, _a1 error) *MockPuller_Pull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPuller_Pull_Call) RunAndReturn(run func(context.Context, PullMethod, *artifact.Artifact, ...PullOption) (*artifact.PullResult, error)) *MockPuller_Pull_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPuller creates a new instance of MockPuller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPuller(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPuller {
	mock := &MockPuller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
