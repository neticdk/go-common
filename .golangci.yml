---
linters:
  disable-all: true
  enable:
    # Checks for unhandled errors.
    - errcheck
    # Inspects code for simplifications.
    - gosimple
    # Reports suspicious constructs.
    - govet
    # Detects ineffective assignments.
    - ineffassign
    # Performs static analysis checks, including those from govet.
    - staticcheck
    # Finds unused code.
    - unused
    # Formats code according to the gofumpt standard.
    # Replaces gofmt
    - gofumpt
    # Checks for unused imports.
    - goimports
    # Performs more advanced static analysis checks.
    - gocritic
    # Identifies security vulnerabilities.
    - gosec
    # Checks for issues in slog calls.
    - sloglint
    # Detects common misspellings.
    - misspell
    # Runs additional static analysis checks.
    # Replaces golint
    - revive
    # Checks for unclosed HTTP response bodies.
    - bodyclose
    # Checks for redundant nil error checks.
    - nilerr
    # Detects potential memory allocations that could be preallocated.
    - prealloc
    # Finds unnecessary type conversions.
    - unconvert
    # Detects unused function parameters.
    - unparam
    # Checks function and package cyclomatic complexity.
    # - cyclop
    # Measures cyclomatic complexity.
    # - gocyclo
    # Finds repeated strings that could be replaced by constants.
    - goconst

run:
  timeout: 5m
  tests: false

issues:
  exclude-rules:
    - path: _test\.go
      linters:
        - errcheck
  max-issues-per-linter: 0
  max-same-issues: 0

output:
  # Print lines of code with issue
  print-issued-lines: true

linters-settings:
  sloglint:
    # Enforce not mixing key-value pairs and attributes.
    # Default: true
    no-mixed-args: true
    # Enforce using key-value pairs only (overrides no-mixed-args, incompatible with attr-only).
    # Default: false
    # kv-only: true
    # Enforce using attributes only (overrides no-mixed-args, incompatible with kv-only).
    # Default: false
    # attr-only: true
    # Enforce not using global loggers.
    # Values:
    # - "": disabled
    # - "all": report all global loggers
    # - "default": report only the default slog logger
    # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global
    # Default: ""
    no-global: all
    # Enforce using methods that accept a context.
    # Default: false
    context: all

  gosec:
    # Filter out the issues with a lower severity than the given value.
    severity: medium
    # Filter out the issues with a lower confidence than the given value.
    confidence: medium
    config:
      # Maximum allowed permissions mode for os.Mkdir and os.MkdirAll
      G301: "0750"
      # Maximum allowed permissions mode for os.OpenFile and os.Chmod
      G302: "0640"
      # Maximum allowed permissions mode for os.WriteFile and ioutil.WriteFile
      G306: "0640"

  misspell:
    locale: US
    extra-words:
      - typo: "artefact"
        correction: "artifact"

  cyclop:
    # The maximal code complexity to report.
    # Default: 10
    # max-complexity: 10
    # The maximal average package complexity.
    # If it's higher than 0.0 (float) the check is enabled
    # Default: 0.0
    # package-average: 0.0
    # Should ignore tests.
    # Default: false
    skip-tests: true

  gocyclo:
    # Minimal code complexity to report.
    # Default: 30 (but we recommend 10-20)
    min-complexity: 20

  goconst:
    # Ignore test files.
    ignore-tests: true

  revive:
    enable-all-rules: false
    # When set to false, ignores files with "GENERATED" header
    ignore-generated-header: true
    rules:
      # Suggests using constant for magic numbers and string literals
      - name: add-constant
        severity: warning
        arguments:
          - allowInts: "0,1,2,3,4,5,6,7,8,9,10"
            allowFloats: "0.0,0.,1.0,1.,2.0,2.,3.0,3.,4.0,4.,5.0,5.,6.0,6.,7.0,7.,8.0,8.,9.0,9."
            allowStrs: '""'
            maxLitCount: "5"
            ignoreFuncs: 'fmt\.*,slog\.*,.*\.WriteString'
      # Warns when a function receives more parameters than the maximum set by
      # the rule's configuration
      - name: argument-limit
        severity: warning
        arguments: [5]
      # Check for commonly mistaken usages of the sync/atomic package
      - name: atomic
      # Using Boolean literals (true, false) in logic expressions may make the
      # code less readable.
      - name: bool-literal-in-expr
        severity: warning
      # Cognitive complexity is a measure of how hard code is to understand
      # - name: cognitive-complexity
      #   arguments: [7]
      #   severity: warning
      # Methods or fields of struct that have names different only by
      # capitalization could be confusing.
      - name: confusing-naming
        severity: warning
      # Function or methods that return multiple, no named, values of the same
      # type could induce error
      - name: confusing-results
      # The rule spots logical expressions that evaluate always to the same
      # value
      - name: constant-logical-expr
        severity: warning
      # Basic types should not be used as a key in context.WithValue
      - name: context-keys-type
      # This rule spots potential dataraces caused by go-routines capturing
      # (by-reference) particular identifiers of the function from which
      # go-routines are created.
      - name: datarace
      # Packages exposing functions that can stop program execution by exiting
      # are hard to reuse.
      - name: deep-exit
        severity: warning
      # This rule warns on some common mistakes when using defer statement
      - name: defer
        arguments:
          - # Calling 'recover' at the time a defer is registered (i.e. "defer
            # recover()") has no effect.
            - "immediate-recover"
            # Calling 'recover' outside of a deferred function has no effect
            - "recover"
            # Returning values from a deferred function has no effect
            - "return"
            # Deferring inside loops can be misleading and it could lead to
            # exhausting the execution stack
            - "loop"
      # Importing with . makes the programs much harder to understand
      - name: dot-imports
        severity: warning
      # It is possible to unintentionally import the same package twice
      - name: duplicated-imports
      # In Go it is idiomatic to minimize nesting statements, a typical example
      # is to avoid if-then-else constructions
      - name: early-return
        severity: warning
      # It is possible to get a simpler program by replacing
      # errors.New(fmt.Sprintf()) with fmt.Errorf().
      - name: errorf
      # Exported function and methods should have comments
      - name: exported
        arguments:
          - "checkPublicInterface"
      # Enforces conventions on source file names
      # Default: ^[_A-Za-z0-9][_A-Za-z0-9-]*\.go$
      - name: filename-format
      # If a function controls the flow of another by passing it information on
      # what to do, both functions are said to be control-coupled. Coupling
      # among functions must be minimized for better maintainability of the
      # code
      - name: flag-parameter
        severity: warning
      # Typically, functions with names prefixed with Get are supposed to return
      # a value
      - name: get-return
      # An if-then-else conditional with identical implementations in both
      # branches is an error
      - name: identical-branches
      # Checking if an error is nil to just after return the error or nil is
      # redundant
      - name: if-return
      # In Go it is possible to declare identifiers (packages, structs,
      # interfaces, parameters, receivers, variables, constants...) that
      # conflict with the name of an imported package
      - name: import-shadowing
        severity: warning
      # By convention, for better readability, incrementing an integer variable
      # by 1 is recommended to be done using the ++ operator.
      - name: increment-decrement
      # To improve the readability of code, it is recommended to reduce the
      # indentation as much as possible. This rule highlights redundant
      # else-blocks that can be eliminated from the code.
      - name: indent-error-flow
      # Packages declaring structs that contain other inline struct definitions
      # can be hard to understand/read for other developers
      - name: nested-structs
        severity: warning
      # This rule spots logical expressions where the order of evaluation of
      # terms seems non optimal
      - name: optimize-operands-order
      # This rule suggests a shorter way of writing ranges that do not use the
      # second value
      - name: range
      # Constant names like false, true, nil, function names like append, make,
      # and basic type names like bool, and byte are not reserved words of the
      # language; therefore the can be redefined.
      - name: redefines-builtin-id
      # This rule warns on redundant import aliases
      - name: redundant-import-alias
      # Explicit type conversion string(i) where i has an integer type other
      #  than rune might behave not as expected by the developer (e.g.
      #  string(42) is not "42"). This rule spot that kind of suspicious
      #  conversions
      - name: string-of-int
      # Struct tags are not checked at compile time
      - name: struct-tag
      # This rule highlights redundant else-blocks that can be eliminated from
      # the code
      - name: superfluous-else
      # This rule warns when using == and != for equality check time.Time and
      # suggest to time.time.Equal method
      - name: time-equal
      # Using unit-specific suffix like "Secs", "Mins", ... when naming
      # variables of type time.Duration can be misleading
      - name: time-naming
      # This rule checks whether a type assertion result is checked (the ok
      # value), preventing unexpected panics
      - name: unchecked-type-assertion
      # Unconditional recursive calls will produce infinite recursion, thus
      # program stack overflow
      - name: unconditional-recursion
      # This rule suggests to remove redundant statements like a break at the
      # end of a case block, for improving the code's readability
      - name: unnecessary-stmt
      # This rule spots and proposes to remove unreachable code
      - name: unreachable-code
      # This rule warns on unused parameters
      - name: unused-parameter
      # This rule proposes to replace instances of interface{} with any
      - name: use-any
      # This rule warns on useless break statements in case clauses of switch
      # and select statements
      - name: useless-break
      # This rule proposes simplifications of variable declarations
      - name: var-declaration
      # Function parameters that are passed by value, are in fact a copy of the
      # original argument
      - name: waitgroup-by-value
